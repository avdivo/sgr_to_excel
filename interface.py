import os
import sys
from tkinter import *
import tkinter as tk
from tkinter import filedialog, messagebox, ttk
from configparser import ConfigParser
import shutil

from sgr_to_excel import sgr_to_excel


def config_file(action='get', **kwargs):
    """ –ü–æ–ª—É—á–µ–Ω–∏–µ –∏ –∏–∑–º–µ–Ω–µ–Ω–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ —Ñ–∞–π–ª–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏

    import_path - –ø—É—Ç—å –∫ –∫–∞—Ç–∞–ª–æ–≥—É –∏–º–ø–æ—Ä—Ç–∞
    export_path - –ø—É—Ç—å –∫ –∫–∞—Ç–∞–ª–æ–≥—É —ç–∫—Å–ø–æ—Ä—Ç–∞

    –î–ª—è action:
    get - –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç—Å—è —Å–ª–æ–≤–∞—Ä—å —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏,
    set - –≤ —Ñ–∞–π–ª –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –∑–∞–ø–∏—Å—ã–≤–∞—é—Ç—Å—è –ø–∞—Ä–∞–º–µ—Ç—Ä—ã kwargs.
    """

    cast = {'import_path': 'import_path', 'export_path': 'export_path'}

    conf = ConfigParser()
    conf.read('conf.ini')  # –ü–æ–ª—É—á–µ–Ω–∏–µ —Ñ–∞–π–ª–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
    if action == 'set':
        for arg, key in cast.items():
            if arg in kwargs:
                conf['DEFAULT'][key] = kwargs[arg]
    elif action == 'get':
        out = dict()
        for arg, key in cast.items():
            out[arg] = conf['DEFAULT'].get(key, '')
        return out

    with open('conf.ini', 'w') as configfile:
        conf.write(configfile)


def select_folder(path, name):
    """ –î–∏–∞–ª–æ–≥–æ–≤–æ–µ –æ–∫–Ω–æ –≤—ã–±–æ—Ä–∞ –ø–∞–ø–∫–∏ """
    path = filedialog.askdirectory(initialdir=path, title=name)
    return path


def button_import():
    """ –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏ –≤—ã–±–æ—Ä–∞ –∫–∞—Ç–∞–ª–æ–≥–∞ –∏–º–ø–æ—Ä—Ç–∞ """
    path = select_folder(import_var.get(), '–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–∞–ª–æ–≥ –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞')
    if path:
        import_var.set(path)
        config_file(action='set', import_path=path)
        update_cast()


def button_export():
    """ –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏ –≤—ã–±–æ—Ä–∞ –∫–∞—Ç–∞–ª–æ–≥–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞ """
    path = select_folder(export_var.get(), '–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–∞–ª–æ–≥ –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞')
    if path:
        export_var.set(path)
        config_file(action='set', export_path=path)


def button_do():
    """ –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏ –≠–∫—Å–ø–æ—Ä—Ç """
    if not listbox.curselection():
        messagebox.showerror("–û—à–∏–±–∫–∞", "–ù–µ –≤—ã–±—Ä–∞–Ω—ã —Ñ–∞–π–ª—ã –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞!")
        return
    if not os.path.exists(export_var.get()):
        messagebox.showerror("–û—à–∏–±–∫–∞", "–ö–∞—Ç–∞–ª–æ–≥ –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç!")
        return
    if not os.path.exists(import_var.get()):
        messagebox.showerror("–û—à–∏–±–∫–∞", "–ö–∞—Ç–∞–ª–æ–≥ –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç!")
        return

    ok = {}
    message = ''
    progress = ttk.Progressbar(root, length=400, value=0, maximum=100)
    progress.place(x=50, y=560)  # –ü–æ–∫–∞–∑–∞—Ç—å –ø—Ä–æ–≥—Ä–µ—Å—Å –±–∞—Ä
    root.update_idletasks()
    selected = listbox.curselection()
    step_progress = 100 / len(selected)  # –®–∞–≥ –ø—Ä–æ–≥—Ä–µ—Å—Å –±–∞—Ä–∞
    progress['value'] = 0  # –û–±–Ω—É–ª–∏—Ç—å –ø—Ä–æ–≥—Ä–µ—Å—Å –±–∞—Ä
    for index in selected:

        file = listbox.get(index)  # –ü–æ–ª—É—á–∞–µ–º –∏–º—è —Ñ–∞–π–ª–∞
        new_file = file

        try:
            file = os.path.join(import_var.get(), file)  # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª–Ω—ã–π –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞
            if not os.path.exists(file):
                raise Exception(f'–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω!')
            # –°–æ–∑–¥–∞–µ–º –∏–º—è —Ñ–∞–π–ª–∞ –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞ –ø–æ —Å–ª–µ–¥—É—é—â–∏–º –ø—Ä–∞–≤–∏–ª–∞–º:
            # –†–∞—Å—à–∏—Ä–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —Ñ–∞–π–ª–∞ - xlsx, –∏–º—è –∫–∞–∫ —É –∏—Å—Ö–æ–¥–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
            # –ï—Å–ª–∏ —Ñ–∞–π–ª —Å —Ç–∞–∫–∏–º –∏–º–µ–Ω–µ–º —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, —Ç–æ –¥–æ–±–∞–≤–∏—Ç—å –∫ –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞ (1), (2) –∏ —Ç.–¥.
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞ –∏ —Å–æ–∑–¥–∞–µ–º –∏–º—è –Ω–æ–≤–æ–≥–æ —Ñ–∞–π–ª–∞
            i = 0
            basename = os.path.basename(file)
            while True:
                ending = f'({i})' if i else ''
                new_file = os.path.join(export_var.get(), basename.replace('.sgr', f'{ending}.xlsx'))
                if not os.path.exists(new_file):
                    break
                i += 1

            # –ü—Ä–æ—á–∏—Ç–∞—Ç—å, –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –∏ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ñ–∞–π–ª
            ok[os.path.basename(new_file)] = sgr_to_excel(file, new_file, work_dir)

        except Exception as e:
            if not message:
                message = e
            ok[os.path.basename(new_file)] = message
            print(new_file)

        # –£–≤–µ–ª–∏—á–∏—Ç—å –ø—Ä–æ–≥—Ä–µ—Å—Å –±–∞—Ä
        progress['value'] += step_progress
        root.update_idletasks()

    # –í—ã–≤–µ—Å—Ç–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —ç–∫—Å–ø–æ—Ä—Ç–∞ –≤ –¥–∏–∞–ª–æ–≥–æ–≤–æ–º –æ–∫–Ω–µ
    message = ''
    for file, result in ok.items():
        message += f'{file}: {result}\n'
    messagebox.showinfo("–†–µ–∑—É–ª—å—Ç–∞—Ç", message)
    progress.place_forget()  # –°–∫—Ä—ã—Ç—å –ø—Ä–æ–≥—Ä–µ—Å—Å –±–∞—Ä


# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
if getattr(sys, 'frozen', False):
    # –ö–æ–¥ –≤–Ω—É—Ç—Ä–∏ EXE —Ñ–∞–π–ª–∞
    # –ü–æ–ª—É—á–∞–µ–º –ø—É—Ç—å –¥–æ –∑–∞–ø—É—â–µ–Ω–Ω–æ–≥–æ EXE —Ñ–∞–π–ª–∞
    exe_path = os.path.abspath(sys.executable)
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ä–∞–±–æ—á–∏–π –∫–∞—Ç–∞–ª–æ–≥ –∫–∞–∫ —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–∏–π –¥–ª—è EXE
    work_dir = os.path.dirname(exe_path)
else:
    # –ö–æ–¥ –≤ –æ–±—ã—á–Ω–æ–º .py —Ñ–∞–π–ª–µ
    exe_path = None
    work_dir = os.path.dirname(os.path.abspath(__file__))
os.chdir(work_dir)
inside_folder = os.path.dirname(os.path.abspath(__file__))

# –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è –æ–±—Ä–∞–∑—Ü–∞ –≤—ã—Ö–æ–¥–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
if not os.path.exists(os.path.join(work_dir, 'sample.xlsx')):
    if exe_path:
        # –ï—Å–ª–∏ –∑–∞–ø—É—â–µ–Ω –∏–∑ EXE, —Ç–æ —Å–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å –æ–±—Ä–∞–∑–µ—Ü –∏–∑ EXE –≤ —Ä–∞–±–æ—á–∏–π –∫–∞—Ç–∞–ª–æ–≥
        shutil.copy(os.path.join(inside_folder, 'sample.xlsx'), work_dir)
        messagebox.showerror("–û—à–∏–±–∫–∞", "–í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –æ–±—Ä–∞–∑–µ—Ü –∏—Å—Ö–æ–¥—è—â–µ–≥–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞ 'sample.xlsx'!")
    else:
        # –í—ã–≤–µ—Å—Ç–∏ –¥–∏–∞–ª–æ–≥–æ–≤–æ–µ –æ–∫–Ω–æ –æ–± –æ—à–∏–±–∫–µ –∏ –≤—ã–π—Ç–∏ –∏–∑ –ø—Ä–æ–≥—Ä–∞–º–º—ã
        messagebox.showerror("–û—à–∏–±–∫–∞", "–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –æ–±—Ä–∞–∑–µ—Ü –∏—Å—Ö–æ–¥—è—â–µ–≥–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞ 'sample.xlsx'!")
        exit()

config = config_file()
import_path = config['import_path']
export_path = config['export_path']

# –ï—Å–ª–∏ –ø—É—Ç—å –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, —Ç–æ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ç–µ–∫—É—â–∏–π –∫–∞—Ç–∞–ª–æ–≥
if not os.path.exists(import_path):
    import_path = None
if not os.path.exists(export_path):
    export_path = None
if not import_path:
    import_path = work_dir
if not export_path:
    export_path = work_dir
config_file(action='set', import_path=import_path, export_path=export_path)

# –°–æ–∑–¥–∞–µ–º –æ–∫–Ω–æ —Å –∏–∫–æ–Ω–∫–æ–π –∏ –∑–∞–≥–æ–ª–æ–≤–∫–æ–º
root = tk.Tk()

# –†–∞–∑–º–µ—Ä —ç–∫—Ä–∞–Ω–µ
w = root.winfo_screenwidth()
h = root.winfo_screenheight()

# –†–∏—Å—É–µ–º –æ–∫–Ω–æ
root.title("Sqr to Excel Converter")
root.geometry(f'500x600+{(w - 500) // 2}+{(h - 600) // 2}')
root.iconbitmap(os.path.join(inside_folder, 'sticker.ico'))

# –ò–º–ø–æ—Ä—Ç
import_frame = LabelFrame(root, width=470, height=310, text='–ò–º–ø–æ—Ä—Ç', foreground='#083863', font=('Arial', 12))
import_frame.place(x=15, y=40)

# –ú–µ—Ç–∫–∞ –í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–∞–ª–æ–≥
import_label1 = tk.Label(import_frame, text='–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–∞–ª–æ–≥', font=('Arial', 12))
import_label1.place(x=10, y=10)

# –ü–æ–ª–µ –¥–ª—è –≤–≤–æ–¥–∞ –ø—É—Ç–∏ –∫ –∫–∞—Ç–∞–ª–æ–≥—É
import_var = StringVar(value=import_path)
import_entry = tk.Entry(import_frame, textvariable=import_var, width=41, font=('Arial', 12), state='readonly')
import_entry.place(x=10, y=40)

# –ö–Ω–æ–ø–∫–∞ —Å–æ —Å—Ç—Ä–µ–ª–∫–æ–π –≤–Ω–∏–∑ –í—ã–±–æ—Ä –∫–∞—Ç–∞–ª–æ–≥–∞
import_button = tk.Button(import_frame, text='‚ñº', font=('Arial', 8), width=3, height=1, command=button_import)
import_button.place(x=390, y=40)

# –ö–Ω–æ–ø–∫–∞ —Å–æ –∑–Ω–∞—á–∫–æ–º –ø–∞–ø–∫–∏ –û—Ç–∫—Ä—ã—Ç—å –∫–∞—Ç–∞–ª–æ–≥
import_button_folder = tk.Button(import_frame, text='üìÅ', font=('Arial', 8), width=3, height=1,
                                 command=lambda: os.startfile(import_var.get()))
import_button_folder.place(x=425, y=40)

# –ú–µ—Ç–∫–∞ –í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∞–π–ª(—ã) –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞
import_label2 = tk.Label(import_frame, text='–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∞–π–ª(—ã) –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞', font=('Arial', 12))
import_label2.place(x=10, y=70)

# –§—Ä–µ–π–º –¥–ª—è —Å–ø–∏—Å–∫–∞
frame = tk.Frame(import_frame, width=40, height=10)
frame.place(x=10, y=100)

scrollbar = tk.Scrollbar(frame)
scrollbar.grid(row=0, column=1, sticky='ns')

listbox = tk.Listbox(frame, selectmode=tk.MULTIPLE, font=('Arial', 14), highlightthickness=0, width=39, height=7)
listbox.grid(row=0, column=0, sticky='nsew')

listbox.config(yscrollcommand=scrollbar.set)
scrollbar.config(command=listbox.yview)

# –æ—Ç–∫–ª—é—á–∞–µ–º –ø–æ–¥—á–µ—Ä–∫–∏–≤–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ –ø—Ä–∏ –≤—ã–¥–µ–ª–µ–Ω–∏–∏
listbox.config(activestyle='none')


def update_cast():
    """ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —Ñ–∞–π–ª–æ–≤ –≤ listbox """
    listbox.delete(0, tk.END)
    for file in os.listdir(import_var.get()):
        if file.endswith('.sgr'):
            listbox.insert(tk.END, file)


update_cast()  # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —Ñ–∞–π–ª–æ–≤ –≤ listbox

# –≠–∫—Å–ø–æ—Ä—Ç
export_frame = LabelFrame(root, width=470, height=110, text='–≠–∫—Å–ø–æ—Ä—Ç', foreground='#083863', font=('Arial', 12))
export_frame.place(x=15, y=380)

# –ú–µ—Ç–∫–∞ –í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–∞–ª–æ–≥
export_label = tk.Label(export_frame, text='–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–∞–ª–æ–≥', font=('Arial', 12))
export_label.place(x=10, y=10)

# –ü–æ–ª–µ –¥–ª—è –≤–≤–æ–¥–∞ –ø—É—Ç–∏ –∫ –∫–∞—Ç–∞–ª–æ–≥—É
export_var = StringVar(value=export_path)
export_entry = tk.Entry(export_frame, textvariable=export_var, width=41, font=('Arial', 12), state='readonly')
export_entry.place(x=10, y=40)

# –ö–Ω–æ–ø–∫–∞ —Å–æ —Å—Ç—Ä–µ–ª–∫–æ–π –≤–Ω–∏–∑
export_button = tk.Button(export_frame, text='‚ñº', font=('Arial', 8), width=3, height=1, command=button_export)
export_button.place(x=390, y=40)

# –ö–Ω–æ–ø–∫–∞ —Å–æ –∑–Ω–∞—á–∫–æ–º –ø–∞–ø–∫–∏ –û—Ç–∫—Ä—ã—Ç—å –∫–∞—Ç–∞–ª–æ–≥
export_button_folder = tk.Button(export_frame, text='üìÅ', font=('Arial', 8), width=3, height=1,
                                 command=lambda: os.startfile(export_var.get()))
export_button_folder.place(x=425, y=40)

# –ö–Ω–æ–ø–∫–∞ –≠–∫—Å–ø–æ—Ä—Ç
do_button = tk.Button(root, text='–≠–∫—Å–ø–æ—Ä—Ç', font=('Arial', 12), width=10, height=1, command=button_do)
do_button.place(x=135, y=510)

# –ö–Ω–æ–ø–∫–∞ –û—Ç–º–µ–Ω–∞
cancel_button = tk.Button(root, text='–ó–∞–∫—Ä—ã—Ç—å', font=('Arial', 12), width=10, height=1)
cancel_button.place(x=265, y=510)
cancel_button.bind('<Button-1>', lambda e: root.destroy())

root.mainloop()
